apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: rootProject.file('gradle/dependency/commonlib.gradle')
// 应用 com.sensorsdata.analytics.android 插件
apply plugin: 'com.sensorsdata.analytics.android'

android {
    defaultConfig {
        applicationId "com.hjhjw1991.barney.byh"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [MODULE_NAME: "module is " + project.name, "PACKAGE_NAME": applicationId]
            }
        }
        sourceSets {
            debug {
                java.srcDirs = ['src/main/java', 'build/generated/data_binding_base_class_source_out/debug/out']
            }
        }
    }
}

dependencies {
    implementation project(":commonlib")
    implementation project(":serviceprovider")
    implementation project(":serviceprovider-annotation")
    kapt project(":serviceprovider-annotation")

    // 添加 Sensors Analytics SDK 依赖
    implementation 'com.sensorsdata.analytics.android:SensorsAnalyticsSDK:6.3.5'
    // 弹性布局
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    implementation fileTree(dir: "libs", include: ["*.jar"])
}

project.afterEvaluate {
    createOutputDepsTask()
}

// 创建输出依赖的任务, 可手动运行
def createOutputDepsTask() {
    project.android.applicationVariants.all { variant ->
        tasks.create(name: "showDeps${variant.name.capitalize()}",
                description: "show dependencies") {
            doLast {
                def dir = new File(project.buildDir, "outputs/logs")
                if (!dir.exists()) {
                    dir.mkdirs()
                }
                File file = new File(dir, "${variant.name}-versions.txt")
                if (file.exists()) {
                    file.delete()
                    file.createNewFile()
                }
                var jsonOutput = "---- dependencies ----"
                jsonOutput += "\n"
                jsonOutput += "["

                println("---start---")

                Configuration configuration
                try {
                    configuration = project.configurations."${variant.name}RuntimeClasspath"
                    println(configuration)
                    configuration.resolvedConfiguration.lenientConfiguration.allModuleDependencies.each {dep ->
                        def identifier = dep.module.id
                        println("found ${identifier.group}:${identifier.name}:${identifier.version}")
                        def addToJson
                        addToJson = { resolvedDep ->
                            def id = resolvedDep.module.id
                            jsonOutput += "\n{"
                            jsonOutput += "\"groupId\":\"${id.group}\",\"artifactId\":\"${id.name}\",\"version\":\"${id.version}\""
                            jsonOutput += ",\"dependencies\":["
                            if(resolvedDep.children.size() != 0){
                                resolvedDep.children.each { childResolvedDep ->
                                    // don't record runtime
                                    if(resolvedDep in childResolvedDep.getParents() && childResolvedDep.getConfiguration() == 'compile'){
                                        addToJson(childResolvedDep)
                                    }
                                }
                                if(jsonOutput[-1] == ','){
                                    jsonOutput = jsonOutput[0..-2]
                                }
                            }
                            jsonOutput += "]},"
                        }
                        addToJson(dep)
                    }
                } catch (Exception e) {
                    println("Error Occured!!")
                    println(e)
                }
                jsonOutput += "\n]"
                file.text = jsonOutput
                println("---end---")
            }
        }
    }
}